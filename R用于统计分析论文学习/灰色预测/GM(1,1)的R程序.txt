#编写应用于R软件的GM(1,1)模型  

gm11<-function(x0,t){ #x0为输入序列，t为预测个数  
result<-list()
x1<-cumsum(x0) #一次累加生成序列1-AG0序列  
b<-numeric(length(x0)-1)  
n<-length(x0)  
for(i in 1:(n-1)){ #生成x1的紧邻均值生成序列  
b[i]<--(x1[i]+x1[i+1])/2   
b} #得序列b，即为x1的紧邻均值生成序列  
D<-numeric(length(x0)-1)  
D[]<-1  
B<-cbind(b,D)  
BT<-t(B)#做逆矩阵  
M<-solve(BT%*%B)  
YN<-numeric(n-1)  
YN<-x0[2:n]  
alpha<-M%*%BT%*%YN  #模型的最小二乘估计参数列满足alpha尖  
alpha2<-matrix(alpha,ncol=1)  
a<-alpha2[1]  
u<-alpha2[2]  
cat("GM(1,1)参数估计值：",'\n',"发展系数-a=",-a,"  ","灰色作用量u=",u,'\n','\n') #利用最小二乘法求得参数估计值a,u 
N<-n+t 
y<-numeric(N)  
y[1]<-x1[1]  
for(w in 1:(N-1)){  #将a,u的估计值代入时间响应序列函数计算x1拟合序列y  
y[w+1]<-(x1[1]-u/a)*exp(-a*w)+u/a   
}  


cat("x(1)的模拟值：",'\n',y,'\n')  
result$GM.pred<-y[(n+1):N]; #将预测值放入到输出结果中
xy<-numeric(n)  
xy[1]<-y[1]  

for(o in 2:n){ #运用后减运算还原得模型输入序列x0预测序列  
xy[o]<-y[o]-y[o-1]   
}   
cat("x(0)的模拟值：",'\n',xy,'\n','\n')                         
result$simulate<-xy #将原数据模拟值放入结果中  

##计算残差e  
e<-numeric(length(x0)) #用0初始化残差 
for(l in 1:length(x0)){  
e[l]<-x0[l]-xy[l] #得残差  
}  

##计算相对误差  
e2<-numeric(length(x0))  
for(s in 1:length(x0)){  
e2[s]<-(abs(e[s])/x0[s]) #得相对误差  
}  
cat("残差平方和=",sum(e^2),'\n')  
cat("平均绝对值相对误差=",sum(abs(e2))/(length(e2)-1)*100,"%",'\n')  
cat("相对精度=",(1-(sum(abs(e2))/(length(e2)-1)))*100,"%",'\n','\n')  
result$MAE<-sum(abs(e2))/(length(e2)-1) #放入函数结果中
##后验差比值检验  
avge<-mean(abs(e));esum<-sum((abs(e)-avge)^2);evar=esum/(length(e)-1);se=sqrt(evar)  #计算残差的方差se  
avgx0<-mean(x0);x0sum<-sum((x0-avgx0)^2);x0var=x0sum/(length(x0));sx=sqrt(x0var)  #计算原序列x0的方差sx  
cv<-se/sx  #得后验差比值  
result$C<-cv #放入函数结果中
P<-sum((which(abs(e-mean(e))<0.6745*sx))>0)/length(x0) #计算小概率误差
result$P<-P #放入函数结果中
result$residul<-e
cat("后验差检验:",'\n',"C值=",cv,"P值=",P,'\n')#对后验差比值进行检验，与一般标准进行比较判断预测结果好坏。  
if(cv <=0.35 & P>=0.95){       
cat("C值<0.35,P>=0.95, GM(1,1)预测精度等级为：1级(好)",'\n','\n')  
 } 
if(0.35<=cv & cv<0.5 & P>=0.80 &P<0.95){  
cat("C值属于[0.35,0.5),P值属于[0.80,0.95),GM(1,1)模型预测精度等级为：2级(合格)",'\n','\n')  
 }
if(cv<=0.65 & cv>0.5 & P>=0.70 & P<0.80){  
cat("C值属于[0.5,0.65),P值属于[0.7,0.80),GM(1,1)模型预测精度等级为：3级(勉强合格)",'\n','\n')  
 }
if(cv>0.65 & P<0.7){ 
cat("C值>=0.65, GM(1,1)模型预测精度等级为：4级(不合格)",'\n','\n')  
  }  
#画出输入序列x0的预测序列及x0的比较图像  
plot(xy,col='blue',type='b',pch=16,xlab='时间',ylab='时间序列值')  
points(x0,col='red',type='b',pch=4)  
legend('topleft',c('预测序列','原始序列'),pch=c(16,4),lty=l,col=c('blue','red'))
result  
}   
a<-c(1143.12,1136.89,1147.19,1163.52,1178.37,1167.59,1190.68,1213.67,1218.00,1239.60)
Ba<-cumsum(a)  
Rou=a[2:length(a)]/Ba[1:(length(a)-1)] #计算序列光滑比
if(sum((diff(Rou)<0)>0)==(length(Rou)-1))
cat("原序列为光滑序列",'\n') #若序列光滑比为递减的，则原序列为光滑序列
##序列光滑性通过后，进行下一步 
(a.GM11<-gm11(a,6)) #预测并输出结果  

