########################决策树（分类树和回归树）的应用######################

##案例一：建立分类树
##初建分类树
install.packages("rpart")  #首次使用安装该递归划分R包
install.packages("rpart.plot") #安装可视化决策树的R包
library("rpart")  #将rpart包载入到内存中
library("rpart.plot")  
DirFile<-"E:\\学习\\R用于统计分析论文学习\\决策树\\BuyOrNot.txt" #指定文件路径
BuyOrNot<-read.table(file=DirFile,header=TRUE)  #读取文本文件，返回一个数据框
BuyOrNot$Income<-as.factor(BuyOrNot$Income) #将数据框中的分类型数据转化为因子
BuyOrNot$Gender<-as.factor(BuyOrNot$Gender)
Ctl<-rpart.control(minsplit=2,maxcompete=4,xval=10,maxdepth=10,cp=0) #用户自己设置决策树的控制参数
set.seed(12345) #设置随机种子，使交叉验证剪枝法的结果可以重现
TreeFit1<-rpart(Purchase~.,data=BuyOrNot,method="class",parms=list(split="gini"),control=Ctl) #建立分类树模型,异质性指标用Gini系数
TreeFit1<-rpart(Purchase~.,data=BuyOrNot,method="class",parms=list(split="imformation"),control=Ctl) #异质性指标用信息熵建立分类决策树模型
rpart.plot(TreeFit1,type=4,branch=1,extra=2) #可视化分类树,cp=0的树非常复杂，鲁棒性不强，不易推广
printcp(TreeFit1) #显示复杂度参数列表
plotcp(TreeFit1) #可视化复杂度参数
CFit1<-predict(TreeFit1,BuyOrNot[,-1],type="class")  #对新样本进行预测，返回新样本的类别
#CFit1<-predict(TreeFit,MailShot) #使用默认值则返回属于该类别的概率
ConfM1<-table(BuyOrNot[,1],CFit1)  #建立混淆矩阵
(E1<-(sum(ConfM1)-sum(diag(ConfM1)))/sum(ConfM1)) #计算误判率

##再建分类树
#############示例一：自动建树
set.seed(12345)
(TreeFit2<-rpart(Purchase~.,data=BuyOrNot,method="class",parms=list(split="gini"))) #采用默认参数建立决策树2

(TreeFit2<-rpart(Purchase~.,data=BuyOrNot,method="class",parms=list(split="imformation"))) #基于信息熵的分类决策树
rpart.plot(TreeFit2,type=4,branch=0,extra=2) #可视化决策树
printcp(TreeFit2) #

################示例一：直接得到某子树
TreeFit3<-prune(TreeFit1,cp=0.0036) #在决策树1的基础上，按照复杂度参数可视化图像的0.0036进行剪枝，得到更优的模型
rpart.plot(TreeFit3,type=4,branch=0,extra=2) #可视化剪枝后的分类决策树，输出PDF的矢量图片，能够任意放大
printcp(TreeFit3) #显示复杂度列表
plotcp(TreeFit3) #可视化复杂度列表

#######################示例二：建立单个分类树
library("rpart")
DirFile2<-"E:\\学习\\R用于统计分析论文学习\\决策树\\MailShot.txt" #指定文件路径
MailShot<-read.table(file=DirFile2,header=TRUE) #读入数据成为标准数据结构数据框
MailShot<-MailShot[,-1] #将第一列移除
Ctl<-rpart.control(minsplit=20,maxcompete=4,maxdepth=30,cp=0.01,xval=10) #自行设置决策树参数(此处都是rpart的默认值)
set.seed(12345) #设置随机种子，使交叉验证剪枝法的结果可以重现
TreeFit<-rpart(MAILSHOT~.,data=MailShot,method="class",parms=list(split="gini")) #建立分类决策树，默认cp=0.01

TreeFit<-rpart(MAILSHOT~.,data=MailShot,method="class",parms=list(split="imformation")) #建立基于信息熵的分类决策树
rpart.plot(TreeFit,type=4,branch=0,extra=1) #可视化决策树
##剪枝处理
#plotcp(TreeFit) #可视化复杂度参数，用于剪枝
#TreeFit<-prune(TreeFit,cp=0.075) #对决策树剪枝

CFit1<-predict(TreeFit,MailShot,type="class")  #对新样本进行预测，返回新样本的类别
#CFit1<-predict(TreeFit,MailShot) #使用默认值则返回属于该类别的概率
ConfM1<-table(MailShot$MAILSHOT,CFit1)  #建立混淆矩阵
(E1<-(sum(ConfM1)-sum(diag(ConfM1)))/sum(ConfM1)) #计算预测误差，即错判率： 信息熵：0.2833333；基尼系数： 0.2833333

