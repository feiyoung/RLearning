rm(list=ls()) #清除环境变量
par(mfrow=c(1,2)) # 设置绘图布局
data=read.csv("nonparadata1.csv") # 载入数据
y=data[,1] 
x=data[,2]

##选择窗宽h
CV0<-outer(1:6,1:2)*0  # 初始化6*2的一个矩阵 （1:6）6*1 *(1:2)1*2 = 6*2
CV0[,1]<-c(0.6,0.8,1,1.2,1.5,1.8) # 给第一列赋值，给定一系列的窗宽参数
j<-1
while(j<=6) # 循环
{
  h<-CV0[j,1] # 窗宽参数取便第一列
  RE=0 # 初始化
  for (i in 1:5) # 5折交叉验证，共300个观测
  {
   index=(1:60)+(i-1)*60 #index=rep(1,60)+(i-1)*60 何叶师姐这个是缺一交叉验证
   y=y[-index] # 剔除这一组数据
   x=x[-index]
   x0=x[index] # 取出剔除的数据
   y0=y[index]
   sum=0 # 初始化
    for(k in 1:60)
      {
        kernel=0.75*(1-((x-x0[k])/h)^2)/h*(abs(x-x0[k])<=h) # epanchnnekov核函数

        f=lm(y~x,weights=kernel) # 带权的线性回归
        sum=sum+(y0[k]-f$coefficient[1])^2 # 计算误差平方和
      }
 RE=RE+sum # 得到误差平方和
    }
CV0[j,2]=RE # 第二列为对应误差平方和
print(CV0[j,2]) #输出误差平方和
j<-j+1
}
dput(CV0,"CV0_h.r") # 将R对象CVO写入到一个二进制文本文件中
plot(CV0[,1],CV0[,2],xlab="h",ylab="cv",main="(a) h vs cv") # 会出图像
lines(CV0[,1],CV0[,2])

#图形
y=data[,1]
x=data[,2]
plot(x,y,main="(b) Estiamted curve")
n=length(x)
x0=unique(sort(x)) # 对x按升序排列
n0=length(x0)
h=1 # 利用K折交叉验证选择的窗宽
result=matrix(0,n0,2) # n0*2的矩阵
for (i in 1:n0)
{
Y=y
X=x-x0[i]

kernel=0.75*(1-((x-x0[i])/h)^2)/h*(abs(x-x0[i])<=h)
#kernel=exp(-(x-x0[i])^2/(2*h^2))/(h*sqrt(2*pi))
f=lm(Y~X,weights=kernel)
result[i,1]=f$coefficient[1] # 局部线性估计整条曲线
result[i,2]=x0[i] # 为对应x的取值
}
lines(result[,2],result[,1])
write.table(result,"estimate.r") # 将结果变量导入到文件中

#---------------重抽样计算标准差并画出置信带

n1=200 # 重抽样200次
re=matrix(0,n1,n0)  # 200*n0的矩阵

for(i in 1:n1)
  {
   set.seed(i)
   index<-sample(1:n,n,T,rep(1/n,n))
   y=data[index,1] #只是将x和y的顺序打乱
   x=data[index,2]
   for (j in 1:n0)
    {
     Y=y
     X=x-x0[j]
     kernel=0.75*(1-((x-x0[j])/h)^2)/h*(abs(x-x0[j])<=h)
     #kernel=exp(-(x-x0[j])^2/(2*h^2))/(h*sqrt(2*pi))
     f=lm(Y~X,weights=kernel)
    re[i,j]=f$coefficient[1]
   }
 print(i)
  }
write.table(re,"residual.r")
result=read.table("estimate.r")
re=read.table("residual.r")
sd=rep(0,n0) #初始化标准差矩阵
for (k in 1:n0)
{
sd[k]=sd(re[,k]) # 计算每一列的标准差
}

lines(result[,2],result[,1]-1.96*sd,lty=2)
lines(result[,2],result[,1]+1.96*sd,lty=2)





