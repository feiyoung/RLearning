# R语言S3方法的学习 --------------------------------------------------------------
library(pryr) 
#通过变量创建S3对象
x<-1
attr(x,'class')<-'foo' # 为x对象赋予指定类别
x
class(x)
# 用pryr包的otype函数，检查x的类型
otype(x)
#通过structure()函数创建S3对象
y <- structure(2, class = "foo") # 值为2，类别为'foo'的S3对象
y
class(y)
otype(y)
#创建一个多类型的S3对象
#S3对象没有明确结构关系，一个S3对象可以有多个类型, S3对象的 class 属性可以是一个向量，包括多种类型。
x<-1
attr(x,'class')<- c("foo", "bar") # 设置成多类别的S3对象
class(x)
otype(x)
# 3 泛型函数和方法调用
#对于S3对象的使用，通常用UseMethod()函数来定义一个泛型函数的名称，通过传入参数的class属性，来确定不同的方法调用。
#定义一个teacher的泛型函数
#用UseMethod()定义teacher泛型函数
#用teacher.xxx的语法格式定义teacher对象的行为
#其中teacher.default是默认行为
# 用UseMethod()定义teacher泛型函数
teacher <- function(x, ...) UseMethod("teacher")
# 用pryr包中ftype()函数，检查teacher的类型
ftype(teacher)
# 定义teacher内部函数
teacher.lecture <- function(x) print("讲课")
teacher.assignment <- function(x) print("布置作业")
teacher.correcting <- function(x) print("批改作业")
teacher.default<-function(x) print("你不是teacher")
#方法调用时，通过传入参数的class属性，来确定不同的方法调用。
#定义一个变量a，并设置a的class属性为lecture
#把变量a，传入到teacher泛型函数中
#函数teacher.lecture()函数的行为被调用
a<-'teacher'
b <- 2
# 给老师变量设置行为
attr(a,'class') <- 'lecture'
attr(b, 'class') <- 'lecture'
# 执行老师的行为
teacher(a)
teacher(b)
#当然，我们也可以直接调用teacher中定义的行为，如果这样做了就失败了面向对象封装的意义。
teacher.lecture()
teacher()
# 查看teacher对象
teacher
# 查看teacher对象的内部函数
methods(teacher)
#通过methods()的generic.function参数，来匹配泛型函数名字。
methods(generic.function=predict)
## 自定义一种新class的绘图函数plot,采用S3方法
methods(generic.function = plot)
plot.good <- function(x, y, ...) {
  plot.default(x, y, ...)
  abline(h=0, col='red')
}
ax <- rnorm(100)
ay <- sin(ax)
attr(ax, 'class') <- 'good'
#attr(ay, 'class') <- 'good'
class(ax)
plot(ax, ay, pch=2)

#通过methods()的class参数，来匹配类的名字。
methods(class=lm)
#用getAnywhere()函数，查看所有的函数。
# 查看teacher.lecture函数
getAnywhere(teacher.lecture)
# 查看不可见的函数predict.ppr
predict.ppr
exists("predict.ppr")
# getAnywhere()函数查找predict.ppr
getAnywhere("predict.ppr")
#使用getS3method()函数，也同样可以查看不可见的函数
# getS3method()函数查找predict.ppr
getS3method("predict", "ppr")
#5 S3对象的继承关系
#S3对象有一种非常简单的继承方式，用NextMethod()函数来实现。
#定义一个 node泛型函数
node <- function(x) UseMethod("node", x)
node.default <- function(x) "Default node"

# father函数
node.father <- function(x) c("father")

# son函数，通过NextMethod()函数指向father函数
node.son <- function(x) c("son", NextMethod())

# 定义n1
n1 <- structure(1, class = c("father"))
# 在node函数中传入n1，执行node.father()函数
node(n1)
# 定义n2，设置class属性为两个
n2 <- structure(1, class = c("son", "father"))
# 在node函数中传入n2，执行node.son()函数和node.father()函数
node(n2)
#通过对node()函数传入n2的参数，node.son()先被执行，然后通过NextMethod()函数继续执行了
#node.father()函数。这样其实就模拟了，子函数调用父函数的过程，实现了面向对象编程中的继承。
# 6 S3对象的缺点
# 从上面对S3对象的介绍来看，S3对象并不是完全的面向对象实现，而是一种通过泛型函数模拟的面向
# 对象的实现。
# S3使用起来简单，但在实际的面向对象编程过程中，当对象关系有一定的复杂度，S3对象所表达的意
# 义就会变得不太清楚。
# S3封装的内部函数，可绕过泛型函数的检查，以直接被调用。
# S3参数的class属性，可以被任意设置，没有预处理的检查。
# S3参数，只能通过调用class属性进行函数调用，其他属性则不会被class()函数执行。
# S3参数的class属性有多个值时，调用时会按照程序赋值顺序来调用第一个合法的函数。
# 所以，S3只能R语言面向对象的一种简单的实现。

# 7 S3对象的使用
# S3对象系统，被广泛地应用于R语言的早期开发中。在base包中，就有很多的S3对象。
# base包的S3对象

# mean函数
mean
ftype(mean) # 已经是用的S4方法啦
# t函数
ftype(t)
# plot函数
ftype(plot) # 这个是S3方法
# 定义数字型变量a
a <- 1
# 变量a的class为numeric
class(a)
# 定义泛型函数f1
f1 <- function(x) {
    a <- 2
    UseMethod("f1")
}
f1.numeric <- function(x) a
# 给f1()传入变量a
f1(a)
# 给f1()传入数字99
f1(99)
# 定义f1的内部函数
# 给f1()传入字符a
f1.character <- function(x) paste("char", x, sep='--------')
f1("a")
#这样，我们就对S3对象系统有了一个全面认识，开始R语言的面向对象编程之路。
#---------可以开始自定义对象类别，并编程了